package indi.jackwan.oleducation.controllers;

import indi.jackwan.oleducation.models.User;
import indi.jackwan.oleducation.service.EmailService;
import indi.jackwan.oleducation.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.nulabinc.zxcvbn.Strength;
import com.nulabinc.zxcvbn.Zxcvbn;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.UUID;


@Controller
public class RegisterController {
    // This means to get the beans auto-generated by Spring, we will use these to handle the data.
    @Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;
    @Autowired
    private UserService userService;
    @Autowired
    private EmailService emailService;


    @RequestMapping(value = "/register", method = RequestMethod.GET)
    public String showRegistrationPage(Model model, User user) {
        model.addAttribute("user", user);
        return "register";
    }

    @RequestMapping(value = "/register", method = RequestMethod.POST)
    public String processRegistrationForm(Model model, @Valid User user, BindingResult bindingResult, HttpServletRequest request, RedirectAttributes redir) {
        User userExists = userService.findByEmail(user.getEmail());

        // In case that one's account is registered by someone unknown
        if (userExists != null) {
            model.addAttribute("alreadyRegisteredMessage", "Oops!  There is already a user registered with the email provided.");
            bindingResult.reject("email");
            return "register";
        }

        if (bindingResult.hasErrors()) {
            return "register";
        } else { // new user so we create user and send confirmation e-mail
            Zxcvbn passwordCheck = new Zxcvbn();

            Strength strength = passwordCheck.measure(user.getPassword());

            if (strength.getScore() < 3) {
                bindingResult.reject("password");

                // Flash attributes only exist for one redirect.
                redir.addFlashAttribute("normalErrorMessage", "Your password is too weak.  Choose a stronger one.");

                return "redirect:register";
            }

            // Set bCrpyted Password to improve security
            user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));

            // Disable user until they click on confirmation link in email
            user.setEnabled(false);

            // Generate random 36-character string token for confirmation link
            user.setConfirmationToken(UUID.randomUUID().toString());

            userService.saveUser(user);

            String appUrl = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort();
            String confirmationUrl = appUrl + "/confirm?token=" + user.getConfirmationToken();

            emailService.sendConfirmationEmail(confirmationUrl, user);

            model.addAttribute("confirmationMessage", "A confirmation e-mail has been sent to " + user.getEmail());
            return "register";
        }
    }

    // Process confirmation link
    @RequestMapping(value = "/confirm", method = RequestMethod.GET)
    public String confirmRegistration(Model model, @RequestParam("token") String token) {

        User user = userService.findByConfirmationToken(token);

        if (user == null) { // No token found in DB
            model.addAttribute("normalErrorMessage", "Oops!  This is an invalid confirmation link. Please register an accnout instead.");
            return "redirect:register";
        } else { // Token found
            user.setEnabled(true);

            userService.saveUser(user);

            model.addAttribute("successMessage", "Your account has been activated!");
            return "redirect:user";
        }
    }
}